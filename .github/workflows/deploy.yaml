on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      project_number:
        required: true
        type: string
      timestamp:
        required: true
        type: string

env:
  TF_LOG: DEBUG

jobs:
  _:
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: 'Export the environment variables'
        run: |
          echo "DART_VERSION=${{ vars.DART_VERSION }}" >> $GITHUB_ENV
          echo "PROJECT=${{ inputs.project }}" >> $GITHUB_ENV
          echo "PROJECT_NUMBER=${{ inputs.project_number }}" >> $GITHUB_ENV
          echo "REGION=${{ vars.REGION }}" >> $GITHUB_ENV
          #echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "STATE_BUCKET=gs://${{ inputs.project }}-tf-state" >> $GITHUB_ENV
          echo "TIMESTAMP=${{ inputs.timestamp }}" >> $GITHUB_ENV
          echo "ZONE=${{ vars.ZONE }}" >> $GITHUB_ENV

      - uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'deploy@${{ env.PROJECT }}.iam.gserviceaccount.com'

      - name: 'Check if the state bucket for Terraform exists'
        id: probe_bucket
        run: |
          set +e
          gcloud storage buckets describe $STATE_BUCKET
          [ $? -eq 0 ] && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: 'Create the state bucket for Terraform'
        if: steps.probe_bucket.outputs.exists == 'false'
        run: |
          gcloud storage \
            buckets create $STATE_BUCKET \
            --location=$REGION \
            --uniform-bucket-level-access \
            --project=$PROJECT

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - run: terraform fmt -check -recursive
        continue-on-error: true

      - name: 'Allocate a version'
        run: |
          export APP_VERSION=$(grep '^version:' capitalizer/pubspec.yaml | awk '{print $2}');
          export COMMIT_HASH=$(git rev-parse HEAD)
          export VERSION="v$APP_VERSION-$TIMESTAMP-$COMMIT_HASH"
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 'Wait until IAM policy takes effect'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e
        with:
          timeout_minutes: 1
          max_attempts: 5
          retry_wait_seconds: 60
          command: |
            gcloud projects list

      - name: 'Check if the Artifact Registry repository exists'
        id: probe_repository
        run: |
          set +e
          gcloud artifacts repositories list --location=$REGION --project=$PROJECT | grep my-repository
          [ $? -eq 0 ] && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: 'Create the Artifact Registry repository'
        if: steps.probe_repository.outputs.exists == 'false'
        run: |
          gcloud artifacts \
            repositories create my-repository \
            --repository-format=DOCKER \
            --location=$REGION \
            --project=$PROJECT

      - name: 'Submit a build'
        run: |
          SUBSTITUTIONS=(
            "_VERSION=$VERSION"
            "_DART_VERSION=$DART_VERSION"
            "_REGION=$REGION"
            "_REPOSITORY=my-repository"
          ); gcloud builds \
            submit \
            --project=$PROJECT \
            --substitutions="$(echo $(IFS=,; echo "${SUBSTITUTIONS[*]}"))" \
            --config=capitalizer/cloudbuild.yaml \
            capitalizer

      - name: 'Terraform'
        run: |
          cd infrastructure/terraform
          envsubst < backend.tf.template > backend.tf
          terraform init
          terraform apply \
            -auto-approve \
            -var="PROJECT=$PROJECT" \
            -var="REGION=$REGION" \
            -var="ZONE=$ZONE" \
            -var="VERSION=$VERSION"
