on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string

    secrets:
      BILLING_ACCOUNT:
        required: true
      MASTER_PROJECT:
        required: true
      MASTER_PROJECT_NUMBER:
        required: true

jobs:
  _:
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: 'Export the environment variables'
        run: |
          echo "PROJECT=${{ inputs.project }}" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV

      - uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.MASTER_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'project-creator@${{ secrets.MASTER_PROJECT }}.iam.gserviceaccount.com'

      - name: 'Try to access the project'
        id: access
        run: |
          set +e
          gcloud projects describe $PROJECT
          [ $? -eq 0 ] && echo "ok=true" >> $GITHUB_OUTPUT || echo "ok=false" >> $GITHUB_OUTPUT

      - name: 'Set the billing account'
        if: steps.access.outputs.ok == 'true'
        run: |
          gcloud billing \
            projects link $PROJECT \
            --billing-account=${{ secrets.BILLING_ACCOUNT }}

      - name: 'Enable the services'
        if: steps.access.outputs.ok == 'true'
        run: |
          gcloud services enable artifactregistry.googleapis.com --project=$PROJECT
          gcloud services enable cloudbuild.googleapis.com --project=$PROJECT
          gcloud services enable cloudresourcemanager.googleapis.com --project=$PROJECT
          gcloud services enable container.googleapis.com --project=$PROJECT
          gcloud services enable iam.googleapis.com --project=$PROJECT
          gcloud services enable pubsub.googleapis.com --project=$PROJECT

      - name: 'Check if the service account for Terraform exists'
        if: steps.access.outputs.ok == 'true'
        id: probe_deploy_service_account
        run: |
          set +e
          gcloud iam service-accounts list --project=$PROJECT | grep deploy@$PROJECT.iam.gserviceaccount.com
          [ $? -eq 0 ] && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: 'Create the service account for Terraform'
        if: steps.probe_deploy_service_account.outputs.exists == 'false'
        run: |
          gcloud iam \
            service-accounts create "deploy" \
            --project=$PROJECT
          gcloud projects \
            add-iam-policy-binding $PROJECT \
            --member="serviceAccount:deploy@$PROJECT.iam.gserviceaccount.com" \
            --role="roles/owner" \
            --project=$PROJECT

      - name: 'Read the deployers list'
        if: steps.access.outputs.ok == 'true'
        run: |
          input_file="infrastructure/deployers.txt"
          output=""
          while IFS= read -r line; do
            trimmed=$(echo "$line" | xargs)
            if [ -z "$output" ]; then
              output="'$trimmed'"
            else
              output="$output,'$trimmed'"
            fi
          done < "$input_file"
          echo "$output"
          echo "GITHUB_USERS_STR=$output" >> $GITHUB_ENV

      - name: 'Configure Workload Identity Federation for deployment'
        if: steps.access.outputs.ok == 'true'
        run: |
          gcloud iam \
            workload-identity-pools create "github" \
            --location="global" \
            --project=$PROJECT || true
          MAPPING=(
            'google.subject=assertion.sub'
            'attribute.actor=assertion.actor'
            'attribute.repository=assertion.repository'
          );gcloud iam \
            workload-identity-pools providers create-oidc "github" \
            --attribute-mapping="$(echo $(IFS=,; echo "${MAPPING[*]}"))" \
            --issuer-uri="https://token.actions.githubusercontent.com" \
            --location="global" \
            --workload-identity-pool="github" \
            --project=$PROJECT || true
          envsubst < infrastructure/deploy-policy.json | \
            gcloud iam \
              service-accounts set-iam-policy \
              deploy@$PROJECT.iam.gserviceaccount.com \
              /dev/stdin
