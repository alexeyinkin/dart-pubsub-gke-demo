on:
  - workflow_dispatch

jobs:
  test:
    permissions:
      id-token: write

    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.MASTER_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'project-creator@${{ secrets.MASTER_PROJECT_NAME }}.iam.gserviceaccount.com'

      - uses: 'google-github-actions/setup-gcloud@v2'
      - run: gcloud info
      - run: gcloud projects list > /dev/null

      - name: 'Allocate a project ID'
        run: |
          export TIMESTAMP=$(date -u +%Y%m%d-%H%M%S);
          COMMIT_HASH=$(git rev-parse --short HEAD); \
            export PROJECT="p-$TIMESTAMP-$COMMIT_HASH"
          export TIMESTAMP='20240319-141424'
          export PROJECT='p-20240319-141424-7123eaf'
          echo "Timestamp: $TIMESTAMP"
          echo "Project: $PROJECT"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV

#      - name: 'Create Google Cloud Project'
#        run: |
#          gcloud projects \
#            create $PROJECT \
#            --name=$PROJECT \
#            --organization=${{ secrets.ORGANIZATION }}
#          gcloud services enable cloudbilling.googleapis.com --project=$PROJECT
#          gcloud billing \
#            projects link $PROJECT \
#            --billing-account=${{ secrets.BILLING_ACCOUNT }}

      - name: 'Enable services'
        run: |
          gcloud services enable artifactregistry.googleapis.com --project=$PROJECT
          gcloud services enable cloudbuild.googleapis.com --project=$PROJECT
          gcloud services enable container.googleapis.com --project=$PROJECT
          gcloud services enable iam.googleapis.com --project=$PROJECT
          gcloud services enable pubsub.googleapis.com --project=$PROJECT

      - name: 'Export configuration variables'
        run: |
          echo "REGION=${{ vars.REGION }}" >> $GITHUB_ENV
          echo "ZONE=${{ vars.ZONE }}" >> $GITHUB_ENV
          echo "DART_VERSION=${{ vars.DART_VERSION }}" >> $GITHUB_ENV

#      - name: 'Prepare Google Cloud for Terraform'
#        run: |
#          gcloud storage \
#            buckets create "gs://$PROJECT-tf-state" \
#            --location=$REGION \
#            --uniform-bucket-level-access \
#            --project=$PROJECT
#          gcloud iam \
#            service-accounts create "deploy" \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:deploy@$PROJECT.iam.gserviceaccount.com" \
#            --role="roles/owner" \
#            --project=$PROJECT

      # TODO: Move to Terraform?
#      - name: 'Prepare for GKE'
#        run: |
#          gcloud iam \
#            service-accounts create "gke-minimal" \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/logging.logWriter' \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/monitoring.metricWriter' \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/monitoring.viewer' \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/stackdriver.resourceMetadata.writer' \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/autoscaling.metricsWriter' \
#            --project=$PROJECT
#          gcloud projects \
#            add-iam-policy-binding $PROJECT \
#            --member="serviceAccount:gke-minimal@$PROJECT.iam.gserviceaccount.com" \
#            --role='roles/artifactregistry.reader' \
#            --project=$PROJECT
#
      # We don't need Terraform until we build images,
      # but the Google Cloud services take time to get enabled anyway.
      # Killing time productively.
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          terraform_wrapper: false

#      # TODO: terraform fmt
#
#      - name: 'Create the image repository'
#        uses: nick-fields/retry@v3
#        with:
#          timeout_minutes: 3
#          max_attempts: 5
#          command: |
#            gcloud artifacts \
#              repositories create my-repository \
#              --repository-format=DOCKER \
#              --location=$REGION \
#              --project=$PROJECT

      - name: 'Allocate a version'
        run: |
          APP_VERSION=$(grep '^version:' capitalizer/pubspec.yaml | awk '{print $2}'); \
            COMMIT_HASH=$(git rev-parse HEAD); \
            export VERSION="v$APP_VERSION-$TIMESTAMP-$COMMIT_HASH"
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 'Submit a build'
        run: |
          SUBSTITUTIONS=(
            "_VERSION=$VERSION"
            "_DART_VERSION=$DART_VERSION"
            "_REGION=$REGION"
            "_REPOSITORY=my-repository"
          ); gcloud builds \
            submit \
            --project=$PROJECT \
            --substitutions="$(echo $(IFS=,; echo "${SUBSTITUTIONS[*]}"))" \
            --config=capitalizer/cloudbuild.yaml \
            capitalizer

      - name: 'Terraform'
        run: |
          cd terraform
          envsubst < backend.tf.template > backend.tf
          export TF_LOG=DEBUG
          terraform init
          terraform apply \
            -auto-approve \
            -var="PROJECT=$PROJECT" \
            -var="REGION=$REGION" \
            -var="ZONE=$ZONE" \
            -var="VERSION=$VERSION"          

      - name: 'Sleep 30 seconds'
        run: sleep 60

      - name: 'Container output'
        run: |
          gcloud container \
            clusters get-credentials my-cluster --zone=$ZONE --project=$PROJECT
          kubectl get pods
          kubectl logs $(kubectl get pods -o name | grep capitalizer | head -n 1)
